name: Continuous Integration

on:
  pull_request:
    branches: ['**']
  push:
    branches: [main]
    tags: ['**']

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: [lts/*]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: npm install, lint and build
        run: |
          npm ci
          npm run lint
          npm run test:ci
          npm run build
        env:
          CI: ${{ true }}
      - name: Send coverage to codacy
        # secrets are not available for PR from forks, and dependabot PRs
        if: ${{ github.event_name != 'pull_request' && github.actor != 'dependabot[bot]' }}
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: reports/coverage/unit/lcov.info,reports/coverage/psql/lcov.info
      - name: Retrieve version from package.json
        id: package_json_version
        if: "contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'"
        run: |
          content=`cat package.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=packageJson::$content"
      - name: Docker meta
        id: docker_meta
        if: "contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'"
        uses: docker/metadata-action@v4.1.1
        with:
          # list of Docker images to use as base name for tags
          images: ${{ github.repository }}
      - name: Login to DockerHub
        if: "contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'"
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker images
        if: "contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'"
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: version=${{ fromJson(steps.package_json_version.outputs.packageJson).version }}

  create-release:
    needs: build
    if: "startsWith(github.ref, 'refs/tags/v')"
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create or update release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
